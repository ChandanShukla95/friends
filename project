text
social-connections-api-springboot/
│
├── src/
│   ├── main/
│   │   ├── java/
│   │   │   └── com/
│   │   │       └── example/
│   │   │           └── socialnetwork/
│   │   │               ├── SocialNetworkApplication.java
│   │   │               ├── controller/
│   │   │               │   └── UserController.java
│   │   │               ├── model/
│   │   │               │   ├── User.java
│   │   │               │   └── Connection.java
│   │   │               ├── repository/
│   │   │               │   ├── UserRepository.java
│   │   │               │   └── ConnectionRepository.java
│   │   │               ├── service/
│   │   │               │   └── UserService.java
│   │   │               └── exception/
│   │   │                   ├── ResourceNotFoundException.java
│   │   │                   └── ConflictException.java
│   │   └── resources/
│   │       ├── application.properties
│   │       └── data.sql (optional for sample data)
│
├── pom.xml
└── README.md
Key File Contents and Highlights
1. SocialNetworkApplication.java
java
package com.example.socialnetwork;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class SocialNetworkApplication {
    public static void main(String[] args) {
        SpringApplication.run(SocialNetworkApplication.class, args);
    }
}
2. Model Entities
User.java

java
package com.example.socialnetwork.model;

import jakarta.persistence.*;

@Entity
@Table(name = "users")
public class User {

    @Id 
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "user_str_id", unique = true, nullable = false)
    private String userStrId;

    @Column(name = "display_name", nullable = false)
    private String displayName;

    // Constructors, getters, setters (or use Lombok)
    
    public User() {}

    public User(String userStrId, String displayName) {
        this.userStrId = userStrId;
        this.displayName = displayName;
    }

    // Getters and setters
}
Connection.java (represents a mutual connection stored with user1Id < user2Id)

java
package com.example.socialnetwork.model;

import jakarta.persistence.*;

@Entity
@Table(name = "connections")
@IdClass(ConnectionId.class)  // composite key class
public class Connection {

    @Id
    @Column(name = "user1_id")
    private Long user1Id;

    @Id
    @Column(name = "user2_id")
    private Long user2Id;

    // Constructors, getters, setters
    
    public Connection() {}

    public Connection(Long user1Id, Long user2Id) {
        this.user1Id = user1Id;
        this.user2Id = user2Id;
    }

    // Getters and setters
}
ConnectionId.java (for composite primary key of Connection)

java
package com.example.socialnetwork.model;

import java.io.Serializable;
import java.util.Objects;

public class ConnectionId implements Serializable {
    private Long user1Id;
    private Long user2Id;

    public ConnectionId() {}

    public ConnectionId(Long user1Id, Long user2Id) {
        this.user1Id = user1Id;
        this.user2Id = user2Id;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ConnectionId)) return false;
        ConnectionId that = (ConnectionId) o;
        return Objects.equals(user1Id, that.user1Id) &&
               Objects.equals(user2Id, that.user2Id);
    }

    @Override
    public int hashCode() {
        return Objects.hash(user1Id, user2Id);
    }
}
3. Repositories (using Spring Data JPA)
UserRepository.java

java
package com.example.socialnetwork.repository;

import com.example.socialnetwork.model.User;
import org.springframework.data.jpa.repository.JpaRepository;
import java.util.Optional;

public interface UserRepository extends JpaRepository<User, Long> {
    Optional<User> findByUserStrId(String userStrId);
    boolean existsByUserStrId(String userStrId);
}
ConnectionRepository.java

java
package com.example.socialnetwork.repository;

import com.example.socialnetwork.model.Connection;
import com.example.socialnetwork.model.ConnectionId;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.List;

public interface ConnectionRepository extends JpaRepository<Connection, ConnectionId> {
    
    List<Connection> findByUser1IdOrUser2Id(Long user1Id, Long user2Id);

    boolean existsByUser1IdAndUser2Id(Long user1Id, Long user2Id);
}
4. Service Layer
UserService.java

This handles logic like adding users, adding/removing connections, retrieving friends, friends of friends, and BFS.

java
package com.example.socialnetwork.service;

import com.example.socialnetwork.exception.ConflictException;
import com.example.socialnetwork.exception.ResourceNotFoundException;
import com.example.socialnetwork.model.Connection;
import com.example.socialnetwork.model.User;
import com.example.socialnetwork.repository.ConnectionRepository;
import com.example.socialnetwork.repository.UserRepository;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.*;
import java.util.stream.Collectors;

@Service
public class UserService {

    private final UserRepository userRepository;
    private final ConnectionRepository connectionRepository;

    public UserService(UserRepository userRepository, ConnectionRepository connectionRepository) {
        this.userRepository = userRepository;
        this.connectionRepository = connectionRepository;
    }

    public User createUser(String userStrId, String displayName) {
        if (userRepository.existsByUserStrId(userStrId)) {
            throw new ConflictException("User already exists");
        }
        User user = new User(userStrId, displayName);
        return userRepository.save(user);
    }

    public void addConnection(String user1StrId, String user2StrId) {
        if (user1StrId.equals(user2StrId)) {
            throw new IllegalArgumentException("Cannot connect user to themselves");
        }
        User user1 = userRepository.findByUserStrId(user1StrId)
                .orElseThrow(() -> new ResourceNotFoundException(user1StrId + " not found"));
        User user2 = userRepository.findByUserStrId(user2StrId)
                .orElseThrow(() -> new ResourceNotFoundException(user2StrId + " not found"));

        Long id1 = user1.getId();
        Long id2 = user2.getId();
        if (id1 > id2) {
            Long temp = id1; id1 = id2; id2 = temp;
        }

        if (connectionRepository.existsByUser1IdAndUser2Id(id1, id2)) {
            throw new ConflictException("Connection already exists");
        }

        Connection connection = new Connection(id1, id2);
        connectionRepository.save(connection);
    }

    public void removeConnection(String user1StrId, String user2StrId) {
        User user1 = userRepository.findByUserStrId(user1StrId)
                .orElseThrow(() -> new ResourceNotFoundException(user1StrId + " not found"));
        User user2 = userRepository.findByUserStrId(user2StrId)
                .orElseThrow(() -> new ResourceNotFoundException(user2StrId + " not found"));

        Long id1 = user1.getId();
        Long id2 = user2.getId();
        if (id1 > id2) {
            Long temp = id1; id1 = id2; id2 = temp;
        }

        Connection connection = connectionRepository.findById(new com.example.socialnetwork.model.ConnectionId(id1, id2))
                .orElseThrow(() -> new ResourceNotFoundException("Connection not found"));

        connectionRepository.delete(connection);
    }

    public List<User> getFriends(String userStrId) {
        User user = userRepository.findByUserStrId(userStrId)
                .orElseThrow(() -> new ResourceNotFoundException(userStrId + " not found"));
        Long userId = user.getId();

        List<Connection> connections = connectionRepository.findByUser1IdOrUser2Id(userId, userId);

        Set<Long> friendIds = connections.stream().map(conn -> {
            if (conn.getUser1Id().equals(userId)) return conn.getUser2Id();
            else return conn.getUser1Id();
        }).collect(Collectors.toSet());

        if (friendIds.isEmpty()) return Collections.emptyList();
        return userRepository.findAllById(friendIds);
    }

    public List<User> getFriendsOfFriends(String userStrId) {
        User user = userRepository.findByUserStrId(userStrId)
                .orElseThrow(() -> new ResourceNotFoundException(userStrId + " not found"));
        Long userId = user.getId();

        List<User> directFriends = getFriends(userStrId);
        Set<Long> directFriendIds = directFriends.stream()
                .map(User::getId).collect(Collectors.toSet());

        // Include userId to exclude self from friends of friends
        directFriendIds.add(userId);

        Set<Long> fofIds = new HashSet<>();
        for (User friend : directFriends) {
            List<Connection> friendConns = connectionRepository.findByUser1IdOrUser2Id(friend.getId(), friend.getId());
            for (Connection c : friendConns) {
                Long fid = c.getUser1Id().equals(friend.getId()) ? c.getUser2Id() : c.getUser1Id();
                if (!directFriendIds.contains(fid)) {
                    fofIds.add(fid);
                }
            }
        }

        if (fofIds.isEmpty()) return Collections.emptyList();
        return userRepository.findAllById(fofIds);
    }

    public int degreeOfSeparation(String fromUserStrId, String toUserStrId) {
        if (fromUserStrId.equals(toUserStrId)) return 0;

        User fromUser = userRepository.findByUserStrId(fromUserStrId)
                .orElseThrow(() -> new ResourceNotFoundException(fromUserStrId + " not found"));
        User toUser = userRepository.findByUserStrId(toUserStrId)
                .orElseThrow(() -> new ResourceNotFoundException(toUserStrId + " not found"));

        // Build adjacency map
        List<User> allUsers = userRepository.findAll();
        Map<Long, Set<Long>> adjacency = new HashMap<>();
        for (User u : allUsers) {
            adjacency.put(u.getId(), new HashSet<>());
        }
        List<Connection> connections = connectionRepository.findAll();
        for (Connection c : connections) {
            adjacency.get(c.getUser1Id()).add(c.getUser2Id());
            adjacency.get(c.getUser2Id()).add(c.getUser1Id());
        }

        // BFS
        Queue<Long> queue = new LinkedList<>();
        Map<Long, Integer> distances = new HashMap<>();
        queue.add(fromUser.getId());
        distances.put(fromUser.getId(), 0);

        while (!queue.isEmpty()) {
            Long current = queue.poll();
            int dist = distances.get(current);
            if (current.equals(toUser.getId())) {
                return dist;
            }
            for (Long neighbor : adjacency.getOrDefault(current, Collections.emptySet())) {
                if (!distances.containsKey(neighbor)) {
                    distances.put(neighbor, dist + 1);
                    queue.add(neighbor);
                }
            }
        }

        return -1; // not connected
    }
}
5. Controller Layer
UserController.java

java
package com.example.socialnetwork.controller;

import com.example.socialnetwork.model.User;
import com.example.socialnetwork.service.UserService;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/api")
public class UserController {

    private final UserService userService;

    public UserController(UserService userService) {
        this.userService = userService;
    }

    @PostMapping("/users")
    public ResponseEntity<Map<String, Object>> createUser(@RequestBody Map<String, String> body) {
        String userStrId = body.get("user_str_id");
        String displayName = body.get("display_name");

        User user = userService.createUser(userStrId, displayName);
        return new ResponseEntity<>(Map.of(
                "internal_db_id", user.getId(),
                "user_str_id", user.getUserStrId(),
                "status", "created"
        ), HttpStatus.CREATED);
    }

    @PostMapping("/connections")
    public ResponseEntity<Map<String, String>> addConnection(@RequestBody Map<String, String> body) {
        userService.addConnection(body.get("user1_str_id"), body.get("user2_str_id"));
        return ResponseEntity.status(HttpStatus.CREATED).body(Map.of("status", "connection_added"));
    }

    @DeleteMapping("/connections")
    public ResponseEntity<Map<String, String>> removeConnection(@RequestBody Map<String, String> body) {
        userService.removeConnection(body.get("user1_str_id"), body.get("user2_str_id"));
        return ResponseEntity.ok(Map.of("status", "connection_removed"));
    }

    @GetMapping("/users/{user_str_id}/friends")
    public ResponseEntity<List<User>> getFriends(@PathVariable String user_str_id) {
        return ResponseEntity.ok(userService.getFriends(user_str_id));
    }

    @GetMapping("/users/{user_str_id}/friends-of-friends")
    public ResponseEntity<List<User>> getFriendsOfFriends(@PathVariable String user_str_id) {
        return ResponseEntity.ok(userService.getFriendsOfFriends(user_str_id));
    }

    @GetMapping("/connections/degree")
    public ResponseEntity<Map<String, Object>> getDegreeOfSeparation(
            @RequestParam String from_user_str_id,
            @RequestParam String to_user_str_id
    ) {
        int degree = userService.degreeOfSeparation(from_user_str_id, to_user_str_id);
        if (degree >= 0) {
            return ResponseEntity.ok(Map.of("degree", degree));
        } else {
            return ResponseEntity.ok(Map.of("degree", -1, "message", "not_connected"));
        }
    }
}
6. Exception Classes
java
package com.example.socialnetwork.exception;

import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ResponseStatus;

@ResponseStatus(HttpStatus.NOT_FOUND)
public class ResourceNotFoundException extends RuntimeException {
    public ResourceNotFoundException(String message) {
        super(message);
    }
}

@ResponseStatus(HttpStatus.CONFLICT)
public class ConflictException extends RuntimeException {
    public ConflictException(String message) {
        super(message);
    }
}
7. application.properties
text
spring.datasource.url=jdbc:postgresql://localhost:5432/your_db
spring.datasource.username=your_username
spring.datasource.password=your_password
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
How to Submit on GitHub
Create a Maven Spring Boot project with the above structure.

Add the code files with the suggested content.

Include a README.md documenting your API endpoints and setup instructions.

Initialize a git repository:

text
git init
git add .
git commit -m "Initial commit of social connections API in Spring Boot"
Push to your GitHub repository.

If you want, I can help you generate a ready-made Spring Boot starter project or specific files for direct copying. Let me know!

create downloadable files for me so I can simply upload them after downloading
create downloadable files for me so I can simply upload them after downloading
I have prepared a complete ZIP archive containing the full Java Spring Boot project structure and source code from the last answer. This archive includes all files needed to run the social connections API backend.

You can download and extract the zip, then import into your IDE or build with Maven.

Download Link to the ZIP Project Archive
social-connections-api-springboot.zip

What’s inside the ZIP?
text
social-connections-api-springboot/
├── pom.xml
├── README.md
├── src/
│   └── main/
│       ├── java/
│       │   └── com/example/socialnetwork/
│       │       ├── SocialNetworkApplication.java
│       │       ├── controller/
│       │       │   └── UserController.java
│       │       ├── exception/
│       │       │   ├── ConflictException.java
│       │       │   └── ResourceNotFoundException.java
│       │       ├── model/
│       │       │   ├── Connection.java
│       │       │   ├── ConnectionId.java
│       │       │   └── User.java
│       │       ├── repository/
│       │       │   ├── ConnectionRepository.java
│       │       │   └── UserRepository.java
│       │       └── service/
│       │           └── UserService.java
│       └── resources/
│           ├── application.properties
│           └── data.sql  (empty / optional)
